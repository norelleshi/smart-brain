{"version":3,"sources":["components/Navigation/logo.png","components/Navigation/Navigation.js","components/ImageLinkForm/ImageLinkForm.js","components/FaceRecognition/FaceRecognition.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","style","display","justifyContent","paddingLeft","paddingRight","src","logo","alt","width","height","ImageLinkForm","onInputChange","onButtonSubmit","className","type","placeholder","onChange","onClick","FaceRecognition","imageUrl","box","id","heigh","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","particleOptions","particles","number","value","density","enable","value_area","interactivity","events","onhover","mode","initialState","input","App","calculateFaceLocation","response","clarifaiFace","outputs","data","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","displayFaceBox","setState","e","target","state","fetch","method","headers","body","JSON","stringify","then","json","catch","err","console","log","params","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.41b829d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5249cbfe.png\";","import React from 'react';\nimport logo from './logo.png';\n\nconst Navigation = () => {\n    return (\n        <nav style={{display: 'flex', justifyContent: 'space-between', paddingLeft: 40, paddingRight: 40}}>\n            <div>\n                <img src={logo} alt='logo' width=\"170\" height=\"auto\" />\n            </div>\n        </nav>\n    )\n}\n\nexport default Navigation;","import React from 'react';\nimport './ImageLinkForm.css'\n\nconst ImageLinkForm = ({onInputChange, onButtonSubmit}) => {\n    return (\n        <div className='ml4 mr4'>\n            <p className='f3 white'>\n                {'This magic brain will detect faces in your picture. Give it a try! (One face only for now)'}\n            </p>\n            <div className='center'>\n                <div className='mt3 shadow-5 form'>\n                    <input className='f4 pa2 w-75 br2-ns br--left-ns' \n                            type='text' \n                            placeholder='Paste URL' \n                            onChange={onInputChange}/>\n                    <button className='br2-ns br--right-ns w-25 grow f4 link ph3 pv2 dib white bg-light-purple' \n                            onClick={onButtonSubmit}\n                            >Detect</button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ImageLinkForm;","import React from 'react';\nimport './FaceRecognition.css';\n\nconst FaceRecognition = ({imageUrl, box}) => {\n    return (\n        <div className='center ma'>\n            <div className='relative mt2'>\n                <img id='inputimage' src={imageUrl} alt='' width='500px' heigh='auto' />\n                <div className='bounding-box' style={{top: box.topRow, right: box.rightCol, bottom: box.bottomRow, left: box.leftCol}}></div>\n            </div>\n        </div>\n    )\n}\n\nexport default FaceRecognition;","import React from 'react';\nimport Particles from 'react-particles-js';\nimport Navigation from './components/Navigation/Navigation';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\n// import Accumulation from './components/Accumulation/Accumulation';\nimport './App.css';\n\nconst particleOptions = {\n  particles: {\n    number: {\n      value: 70,\n      density: {\n        enable: true,\n        value_area: 600\n      }\n    }\n  },\n  interactivity: {\n    events:{\n      onhover: {\n        enable:true,\n        mode: 'repulse'\n      }\n    }\n  }\n}\n\nconst initialState = {\n  input: '',\n  imageUrl: '',\n  box: {},\n  // accumulation: 0\n}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = initialState;\n  }\n\n  calculateFaceLocation = (response)=> {\n    const clarifaiFace = response.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - (clarifaiFace.right_col * width),\n      bottomRow: height - (clarifaiFace.bottom_row * height)\n    }\n  }\n\n  displayFaceBox = (box) => {\n    this.setState({box: box})\n  }\n\n  onInputChange = (e) => {\n    this.setState({input: e.target.value})\n  };\n\n  onButtonSubmit = () => {\n    this.setState({imageUrl: this.state.input});\n    fetch('https://smartbrain-detect.herokuapp.com/imageurl', {\n      method: 'post',\n      headers: {'Content-type': 'application/json'},\n      body: JSON.stringify({\n        input: this.state.input\n      })\n    })\n    .then(response => response.json())\n    .then(response => {\n      this.displayFaceBox(this.calculateFaceLocation(response))\n    })\n    .catch(err=> console.log(err));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Particles className='particles' params={particleOptions} />\n        <Navigation />\n        {/* <Accumulation accumulation={this.state.accumulation} /> */}\n        <ImageLinkForm \n          onInputChange={this.onInputChange} \n          onButtonSubmit={this.onButtonSubmit}            \n        />\n        <FaceRecognition imageUrl={this.state.imageUrl} box={this.state.box} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}